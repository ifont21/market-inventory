{"version":3,"sources":["components/product/product.component.jsx","components/product-list/product-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Product","props","className","src","product","img","name","ProductList","products","map","key","id","SearchBox","onSearchTerm","hideSearchBox","onShowFilter","icon","onClick","hidden","type","placeholder","onChange","library","add","fab","faSearch","App","handleChange","e","setState","searchTerm","target","value","state","fetch","then","response","json","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gWAGaA,G,YAAU,SAAAC,GAAK,OAC1B,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,wBAAwBC,IAAKF,EAAMG,QAAQC,MAC1D,yBAAKH,UAAU,0BAA0BD,EAAMG,QAAQE,SCF9CC,G,MAAc,SAAAN,GACzB,OACE,yBAAKC,UAAU,8BACZD,EAAMO,SAASC,KAAI,SAAAL,GAAO,OACzB,kBAAC,EAAD,CAASM,IAAKN,EAAQO,GAAIP,QAASA,U,eCJ9BQ,EAAY,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,aAAcC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACvD,OACE,yBAAKb,UAAU,uBACb,kBAAC,IAAD,CACEA,UAAU,mBACVc,KAAK,SACLC,QAASF,IAEX,2BACEG,OAAQJ,EACRK,KAAK,OACLjB,UAAU,oBACVkB,YAAY,iBACZC,SAAUR,M,uBCPlBS,IAAQC,IAAIC,IAAKC,K,IAoDFC,E,YAjDb,aAAe,IAAD,8BACZ,+CAcFC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAhBzB,EAmBdjB,aAAe,WACb,EAAKc,SAAS,CAAEf,eAAgB,EAAKmB,MAAMnB,iBAlB3C,EAAKmB,MAAQ,CACXzB,SAAU,GACVM,eAAe,EACfgB,WAAY,IALF,E,iFASO,IAAD,OAClBI,MAAM,kCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA3B,GAAQ,OAAI,EAAKqB,SAAS,CAAErB,kB,+BAW5B,IAAD,EACuC8B,KAAKL,MAA7CzB,EADC,EACDA,SAAUsB,EADT,EACSA,WAAYhB,EADrB,EACqBA,cAM5B,OAJAN,EAAWA,EAAS+B,QAAO,SAAAnC,GAAO,OAChCA,EAAQE,KAAKkC,cAAcC,SAASX,EAAWU,kBAI/C,yBAAKtC,UAAU,6BACb,4BAAQA,UAAU,4BAChB,iDAGF,6BAASA,UAAU,6BACjB,kBAAC,EAAD,CACEW,aAAcyB,KAAKX,aACnBb,cAAeA,EACfC,aAAcuB,KAAKvB,eAErB,kBAAC,EAAD,CAAaP,SAAUA,U,GA3CfkC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.931698d1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./product.styles.scss\";\n\nexport const Product = props => (\n  <div className=\"market-inventory__product\">\n    <img className=\"market-inventory__img\" src={props.product.img} />\n    <div className=\"market-inventory__name\">{props.product.name}</div>\n  </div>\n);\n","import React from \"react\";\nimport { Product } from \"../product/product.component\";\nimport \"./product-list.styles.scss\";\n\nexport const ProductList = props => {\n  return (\n    <div className=\"market-inventory__products\">\n      {props.products.map(product => (\n        <Product key={product.id} product={product} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.styles.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport const SearchBox = ({ onSearchTerm, hideSearchBox, onShowFilter }) => {\n  return (\n    <div className=\"search-box__wrapper\">\n      <FontAwesomeIcon\n        className=\"search-box__icon\"\n        icon=\"search\"\n        onClick={onShowFilter}\n      />\n      <input\n        hidden={hideSearchBox}\n        type=\"text\"\n        className=\"search-box__input\"\n        placeholder=\"search product\"\n        onChange={onSearchTerm}\n      />\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\n\nimport { ProductList } from \"./components/product-list/product-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(fab, faSearch);\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      products: [],\n      hideSearchBox: true,\n      searchTerm: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3001/products\")\n      .then(response => response.json())\n      .then(products => this.setState({ products }));\n  }\n\n  handleChange = e => {\n    this.setState({ searchTerm: e.target.value });\n  };\n\n  onShowFilter = () => {\n    this.setState({ hideSearchBox: !this.state.hideSearchBox });\n  };\n\n  render() {\n    let { products, searchTerm, hideSearchBox } = this.state;\n\n    products = products.filter(product =>\n      product.name.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    return (\n      <div className=\"market-inventory__wrapper\">\n        <header className=\"market-inventory__header\">\n          <h1>Market Inventory</h1>\n        </header>\n\n        <section className=\"market-inventory__content\">\n          <SearchBox\n            onSearchTerm={this.handleChange}\n            hideSearchBox={hideSearchBox}\n            onShowFilter={this.onShowFilter}\n          />\n          <ProductList products={products} />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}